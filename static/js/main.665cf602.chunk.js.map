{"version":3,"sources":["components/TutorialHeader/TutorialHeader.jsx","components/TutorialHeader/index.jsx","content/LandingPage/LandingPage.jsx","content/LandingPage/index.jsx","content/RepoPage/RepoPage.jsx","content/RepoPage/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["TutorialHeader","aria-label","element","Link","to","prefix","LandingPage","RepoPage","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TA0CeA,ICxCAA,EDaf,WACE,OACE,kBAAC,SAAD,CAAQC,aAAW,mBACjB,kBAAC,gBAAD,MACA,kBAAC,aAAD,CAAYC,QAASC,IAAMC,GAAG,IAAIC,OAAO,OAAzC,mBAGA,kBAAC,mBAAD,CAAkBJ,aAAW,mBAC3B,kBAAC,iBAAD,CAAgBC,QAASC,IAAMC,GAAG,UAAlC,iBAIF,kBAAC,kBAAD,KACE,kBAAC,qBAAD,CAAoBH,aAAW,iBAC7B,kBAAC,IAAD,OAEF,kBAAC,qBAAD,CAAoBA,aAAW,eAC7B,kBAAC,IAAD,OAEF,kBAAC,qBAAD,CAAoBA,aAAW,gBAC7B,kBAAC,IAAD,UE7BKK,ICJAA,EDAf,WACE,OAAO,8CEGMC,ICJAA,EDAf,WACE,OAAO,2CEmBMC,MAdf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,UAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIP,QAAS,kBAAC,EAAD,QACzB,kBAAC,IAAD,CAAOO,KAAK,SAASP,QAAS,kBAAC,EAAD,YCDpBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.665cf602.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  SkipToContent,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n} from 'carbon-components-react/lib/components/UIShell';\nimport { Link } from 'react-router-dom';\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\n\nfunction TutorialHeader() {\n  return (\n    <Header aria-label=\"Carbon Tutorial\">\n      <SkipToContent />\n      <HeaderName element={Link} to=\"/\" prefix=\"IBM\">\n        Carbon Tutorial\n      </HeaderName>\n      <HeaderNavigation aria-label=\"Carbon Tutorial\">\n        <HeaderMenuItem element={Link} to=\"/repos\">\n          Repositories\n        </HeaderMenuItem>\n      </HeaderNavigation>\n      <HeaderGlobalBar>\n        <HeaderGlobalAction aria-label=\"Notifications\">\n          <Notification20 />\n        </HeaderGlobalAction>\n        <HeaderGlobalAction aria-label=\"User Avatar\">\n          <UserAvatar20 />\n        </HeaderGlobalAction>\n        <HeaderGlobalAction aria-label=\"App switcher\">\n          <AppSwitcher20 />\n        </HeaderGlobalAction>\n      </HeaderGlobalBar>\n    </Header>\n  );\n}\n\nexport default TutorialHeader;\n","import TutorialHeader from './TutorialHeader';\n\nexport default TutorialHeader;\n","import React from 'react';\n\nfunction LandingPage() {\n  return <div>LANDING PAGE</div>;\n}\n\nexport default LandingPage;\n","import LandingPage from './LandingPage';\n\nexport default LandingPage;\n","import React from 'react';\n\nfunction RepoPage() {\n  return <div>REPO PAGE</div>;\n}\n\nexport default RepoPage;\n","import RepoPage from './RepoPage';\n\nexport default RepoPage;\n","import React from 'react';\nimport './app.scss';\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\nimport { Route, Routes } from 'react-router-dom';\nimport TutorialHeader from './components/TutorialHeader';\nimport LandingPage from './content/LandingPage';\nimport RepoPage from './content/RepoPage';\n\nfunction App() {\n  return (\n    <>\n      <TutorialHeader />\n      <Content>\n        <Routes>\n          <Route path=\"/\" element={<LandingPage />} />\n          <Route path=\"/repos\" element={<RepoPage />} />\n        </Routes>\n      </Content>\n    </>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((params) => {\n      const registration = params;\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'core-js/modules/es.array.includes';\nimport 'core-js/modules/es.array.fill';\nimport 'core-js/modules/es.string.includes';\nimport 'core-js/modules/es.string.trim';\nimport 'core-js/modules/es.object.values';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}