{"version":3,"sources":["components/TutorialHeader/TutorialHeader.jsx","components/TutorialHeader/index.jsx","components/Info/Info.jsx","content/LandingPage/LandingPage.jsx","content/LandingPage/index.jsx","content/RepoPage/RepoTable.jsx","content/RepoPage/RepoPage.jsx","content/RepoPage/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["TutorialHeader","aria-label","element","Link","to","prefix","InfoSection","className","heading","children","InfoCard","body","icon","splitHeading","phrase","splitPhrase","split","thirdWord","pop","join","createArrayFromPhrase","defaultProps","LandingPage","Breadcrumb","noTrailingSlash","BreadcrumbItem","href","Tabs","selected","triggerHref","role","Tab","tabIndex","label","Button","src","process","alt","RepoTable","tableRows","tableHeaders","DataTable","rows","headers","render","getHeaderProps","getRowProps","tableProps","getTableProps","TableContainer","title","description","Table","isSortable","overflowMenuOnHover","shouldShowBorder","size","stickyHeader","useStaticWidth","useZebraStyles","TableHead","TableRow","TableExpandHeader","map","header","headerProps","TableHeader","isSortHeader","key","onClick","sortDirection","TableBody","row","rowProps","Fragment","id","TableExpandRow","ariaLabel","disabled","isExpanded","isSelected","onExpand","cells","cell","TableCell","value","TableExpandedRow","colSpan","length","rowId","find","getRowDescription","REPO_QUERY","gql","LinkList","url","homepageUrl","style","display","Repos","useState","totalItems","setTotalItems","rowItems","setRowItems","firstRowIndex","setFirstRowIndex","currentPageSize","setCurrentPageSize","useQuery","loading","error","data","useEffect","repositories","user","totalCount","nodes","node","name","stars","stargazers","issueCount","issues","createdAt","Date","toLocaleDateString","updatedAt","links","DataTableSkeleton","columnCount","rowCount","message","slice","Pagination","backwardText","forwardText","pageSize","pageSizes","itemsPerPageText","onChange","page","RepoPage","App","path","Boolean","window","location","hostname","match","client","ApolloClient","uri","authorization","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d1ac7882.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  SkipToContent,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n} from 'carbon-components-react/lib/components/UIShell';\nimport { Link } from 'react-router-dom';\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\nimport UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\nimport Switcher20 from '@carbon/icons-react/lib/switcher/20';\n\nfunction TutorialHeader() {\n  return (\n    <Header aria-label=\"Carbon Example\">\n      <SkipToContent />\n      <HeaderName element={Link} to=\"/\" prefix=\"IBM\">\n        Carbon Example\n      </HeaderName>\n      <HeaderNavigation aria-label=\"Carbon Example\">\n        <HeaderMenuItem element={Link} to=\"/repos\">\n          Repositories\n        </HeaderMenuItem>\n      </HeaderNavigation>\n      <HeaderGlobalBar>\n        <HeaderGlobalAction aria-label=\"Notifications\">\n          <Notification20 />\n        </HeaderGlobalAction>\n        <HeaderGlobalAction aria-label=\"User Avatar\">\n          <UserAvatar20 />\n        </HeaderGlobalAction>\n        <HeaderGlobalAction aria-label=\"App switcher\">\n          <Switcher20 />\n        </HeaderGlobalAction>\n      </HeaderGlobalBar>\n    </Header>\n  );\n}\n\nexport default TutorialHeader;\n","import TutorialHeader from './TutorialHeader';\n\nexport default TutorialHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Take in a phrase and separate the third word in an array\nfunction createArrayFromPhrase(phrase) {\n  const splitPhrase = phrase.split(' ');\n  const thirdWord = splitPhrase.pop();\n  return [splitPhrase.join(' '), thirdWord];\n}\n\nfunction InfoSection({ className, heading, children }) {\n  return (\n    <section className={`bx--row ${className} info-section`}>\n      <div className=\"bx--col-md-8 bx--col-lg-4 bx--col-xlg-3\">\n        <h3 className=\"info-section__heading\">{heading}</h3>\n      </div>\n      {children}\n    </section>\n  );\n}\n\nfunction InfoCard({ heading, body, icon }) {\n  const splitHeading = createArrayFromPhrase(heading);\n\n  return (\n    <div className=\"info-card bx--col-md-4 bx--col-lg-4 bx--col-xlg-3 bx--offset-xlg-1\">\n      <h4 className=\"info-card__heading\">\n        {`${splitHeading[0]} `}\n        <strong>{splitHeading[1]}</strong>\n      </h4>\n      <p className=\"info-card__body\">{body}</p>\n      {icon}\n    </div>\n  );\n}\n\nInfoSection.propTypes = {\n  className: PropTypes.string,\n  heading: PropTypes.string,\n  children: PropTypes.element,\n};\n\nInfoSection.defaultProps = {\n  className: '',\n  heading: '',\n  children: <></>,\n};\n\nInfoCard.propTypes = {\n  heading: PropTypes.string,\n  body: PropTypes.string,\n  icon: PropTypes.element,\n};\n\nInfoCard.defaultProps = {\n  heading: '',\n  body: '',\n  icon: <></>,\n};\n\nexport { InfoSection, InfoCard };\n","import React from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Tabs,\n  Tab,\n} from 'carbon-components-react';\nimport Globe32 from '@carbon/icons-react/lib/globe/32';\nimport PersonFavorite32 from '@carbon/icons-react/lib/person--favorite/32';\nimport Application32 from '@carbon/icons-react/lib/application/32';\nimport { InfoSection, InfoCard } from '../../components/Info';\n\nfunction LandingPage() {\n  return (\n    <div className=\"bx--grid bx--grid--full-width landing-page\">\n      <div className=\"bx--row landing-page__banner\">\n        <div className=\"bx--col-lg-16\">\n          <Breadcrumb noTrailingSlash aria-label=\"Page navigation\">\n            <BreadcrumbItem>\n              <a href=\"/\">Getting started</a>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <h1 className=\"landing-page__heading\">\n            Design &amp; build with Carbon\n          </h1>\n        </div>\n      </div>\n      <div className=\"bx--row landing-page__r2\">\n        <div className=\"bx--col bx--no-gutter\">\n          <Tabs\n            selected={0}\n            triggerHref=\"#\"\n            role=\"navigation\"\n            aria-label=\"Tab navigation\"\n          >\n            <Tab href=\"#\" role=\"presentation\" tabIndex={0} label=\"About\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-md-4 bx--col-lg-7\">\n                    <h2 className=\"landing-page__subheading\">\n                      What is Carbon?\n                    </h2>\n                    <p className=\"landing-page__p\">\n                      Carbon is IBM’s open-source design system for digital\n                      products and experiences. With the IBM Design Language as\n                      its foundation, the system consists of working code,\n                      design tools and resources, human interface guidelines,\n                      and a vibrant community of contributors.\n                    </p>\n                    <Button>Learn more</Button>\n                  </div>\n                  <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                    <img\n                      className=\"landing-page__illo\"\n                      src={`${process.env.PUBLIC_URL}/tab-illo.png`}\n                      alt=\"Carbon illustration\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab href=\"#\" role=\"presentation\" tabIndex={0} label=\"Design\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-lg-16\">\n                    Rapidly build beautiful and accessible experiences. The\n                    Carbon kit contains all resources you need to get started.\n                  </div>\n                </div>\n              </div>\n            </Tab>\n            <Tab href=\"#\" role=\"presentation\" tabIndex={0} label=\"Develop\">\n              <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                <div className=\"bx--row landing-page__tab-content\">\n                  <div className=\"bx--col-lg-16\">\n                    Carbon provides styles and components in Vanilla, React,\n                    Angular, and Vue for anyone building on the web.\n                  </div>\n                </div>\n              </div>\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n      <InfoSection heading=\"The Principles\" className=\"landing-page__r3\">\n        <InfoCard\n          heading=\"Carbon is Open\"\n          body=\"It's a distributed effort, guided by the principles of the open-source movement. Carbon's users are also it's makers, and everyone is encouraged to contribute.\"\n          icon={<PersonFavorite32 />}\n        />\n        <InfoCard\n          heading=\"Carbon is Modular\"\n          body=\"Carbon's modularity ensures maximum flexibility in execution. It's components are designed to work seamlessly with each other, in whichever combination suits the needs of the user.\"\n          icon={<Application32 />}\n        />\n        <InfoCard\n          heading=\"Carbon is Consistent\"\n          body=\"Based on the comprehensive IBM Design Language, every element and component of Carbon was designed from the ground up to work elegantly together to ensure consistent, cohesive user experiences.\"\n          icon={<Globe32 />}\n        />\n      </InfoSection>\n    </div>\n  );\n}\n\nexport default LandingPage;\n","import LandingPage from './LandingPage';\n\nexport default LandingPage;\n","import React from 'react';\nimport {\n  DataTable,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableExpandHeader,\n  TableHeader,\n  TableBody,\n  TableExpandRow,\n  TableCell,\n  TableExpandedRow,\n} from 'carbon-components-react';\nimport PropTypes from 'prop-types';\n\nfunction RepoTable({ tableRows, tableHeaders }) {\n  function getRowDescription(rowId) {\n    const row = tableRows.find(({ id }) => id === rowId);\n    return row ? row.description : '';\n  }\n\n  return (\n    <DataTable\n      rows={tableRows}\n      headers={tableHeaders}\n      render={({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getTableProps,\n      }) => {\n        const tableProps = getTableProps();\n\n        return (\n          <TableContainer\n            title=\"Repositories of Gabriel Giordano\"\n            description=\"A collection of public Gabriel Giordano repositories.\"\n          >\n            <Table\n              isSortable={tableProps.isSortable}\n              overflowMenuOnHover={tableProps.overflowMenuOnHover}\n              shouldShowBorder={tableProps.shouldShowBorder}\n              size={tableProps.size}\n              stickyHeader={tableProps.stickyHeader}\n              useStaticWidth={tableProps.useStaticWidth}\n              useZebraStyles={tableProps.useZebraStyles}\n            >\n              <TableHead>\n                <TableRow>\n                  <TableExpandHeader />\n                  {headers.map((header) => {\n                    const headerProps = getHeaderProps({ header });\n\n                    return (\n                      <TableHeader\n                        isSortHeader={headerProps.isSortHeader}\n                        isSortable={headerProps.isSortable}\n                        key={headerProps.key}\n                        onClick={headerProps.onClick}\n                        sortDirection={headerProps.sortDirection}\n                      >\n                        {header.header}\n                      </TableHeader>\n                    );\n                  })}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rows.map((row) => {\n                  const rowProps = getRowProps({ row });\n\n                  return (\n                    <React.Fragment key={row.id}>\n                      <TableExpandRow\n                        ariaLabel={rowProps.ariaLabel}\n                        disabled={rowProps.disabled}\n                        isExpanded={rowProps.isExpanded}\n                        isSelected={rowProps.isSelected}\n                        key={rowProps.key}\n                        onExpand={rowProps.onExpand}\n                      >\n                        {row.cells.map((cell) => {\n                          return (\n                            <TableCell key={cell.id}>{cell.value}</TableCell>\n                          );\n                        })}\n                      </TableExpandRow>\n                      <TableExpandedRow colSpan={headers.length + 1}>\n                        <p>{getRowDescription(row.id)}</p>\n                      </TableExpandedRow>\n                    </React.Fragment>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        );\n      }}\n    />\n  );\n}\n\nRepoTable.propTypes = {\n  tableRows: PropTypes.arrayOf(PropTypes.object),\n  tableHeaders: PropTypes.arrayOf(PropTypes.object),\n};\n\nRepoTable.defaultProps = {\n  tableRows: [],\n  tableHeaders: [],\n};\n\nexport default RepoTable;\n","import React, { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\nimport PropTypes from 'prop-types';\nimport RepoTable from './RepoTable';\n\nconst REPO_QUERY = gql`\n  query REPO_QUERY {\n    user(login: \"gabrielgiordan\") {\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n\nconst tableHeaders = [\n  {\n    key: 'name',\n    header: 'Name',\n  },\n  {\n    key: 'createdAt',\n    header: 'Created',\n  },\n  {\n    key: 'updatedAt',\n    header: 'Updated',\n  },\n  {\n    key: 'issueCount',\n    header: 'Open Issues',\n  },\n  {\n    key: 'stars',\n    header: 'Stars',\n  },\n  {\n    key: 'links',\n    header: 'Links',\n  },\n];\n\nfunction LinkList({ url, homepageUrl }) {\n  return (\n    <ul style={{ display: 'flex' }}>\n      <li>\n        <Link href={url}>GitHub</Link>\n      </li>\n      {homepageUrl && (\n        <li>\n          <span>&nbsp;|&nbsp;</span>\n          <Link href={homepageUrl}>Homepage</Link>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nfunction Repos() {\n  const [totalItems, setTotalItems] = useState(0);\n  const [rowItems, setRowItems] = useState([]);\n  const [firstRowIndex, setFirstRowIndex] = useState(0);\n  const [currentPageSize, setCurrentPageSize] = useState(10);\n\n  const { loading, error, data } = useQuery(REPO_QUERY);\n\n  useEffect(() => {\n    if (data) {\n      const {\n        user: { repositories },\n      } = data;\n\n      setTotalItems(repositories.totalCount);\n      setRowItems(\n        repositories.nodes.map((node) => {\n          return {\n            id: node.id,\n            key: node.id,\n            name: node.name,\n            description: node.description,\n            stars: node.stargazers.totalCount,\n            issueCount: node.issues.totalCount,\n            createdAt: new Date(node.createdAt).toLocaleDateString(),\n            updatedAt: new Date(node.updatedAt).toLocaleDateString(),\n            links: <LinkList url={node.url} homepageUrl={node.homepageUrl} />,\n          };\n        }),\n      );\n    }\n  }, [data]);\n\n  if (loading)\n    return (\n      <DataTableSkeleton\n        columnCount={tableHeaders.length + 1}\n        rowCount={10}\n        headers={tableHeaders}\n      />\n    );\n\n  if (error) return <p>Error! ${error.message}</p>;\n\n  if (!data) return <p>Not found</p>;\n\n  return (\n    <>\n      <RepoTable\n        tableHeaders={tableHeaders}\n        tableRows={rowItems.slice(\n          firstRowIndex,\n          firstRowIndex + currentPageSize,\n        )}\n      />\n      <Pagination\n        totalItems={totalItems}\n        backwardText=\"Previous page\"\n        forwardText=\"Next page\"\n        pageSize={currentPageSize}\n        pageSizes={[5, 10, 15, 25]}\n        itemsPerPageText=\"Items per page\"\n        onChange={({ page, pageSize }) => {\n          if (pageSize !== currentPageSize) {\n            setCurrentPageSize(pageSize);\n          }\n          setFirstRowIndex(pageSize * (page - 1));\n        }}\n      />\n    </>\n  );\n}\n\nfunction RepoPage() {\n  return (\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\">\n      <div className=\"bx--row repo-page__r1\">\n        <div className=\"bx--col-lg-16\">\n          <Repos />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nLinkList.propTypes = {\n  url: PropTypes.string,\n  homepageUrl: PropTypes.string,\n};\n\nLinkList.defaultProps = {\n  url: '',\n  homepageUrl: '',\n};\n\nexport default RepoPage;\n","import RepoPage from './RepoPage';\n\nexport default RepoPage;\n","import React from 'react';\nimport './app.scss';\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\nimport { Route, Routes } from 'react-router-dom';\nimport TutorialHeader from './components/TutorialHeader';\nimport LandingPage from './content/LandingPage';\nimport RepoPage from './content/RepoPage';\n\nfunction App() {\n  return (\n    <>\n      <TutorialHeader />\n      <Content>\n        <Routes>\n          <Route path=\"/\" element={<LandingPage />} />\n          <Route path=\"/repos\" element={<RepoPage />} />\n        </Routes>\n      </Content>\n    </>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((params) => {\n      const registration = params;\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'core-js/modules/es.array.includes';\nimport 'core-js/modules/es.array.fill';\nimport 'core-js/modules/es.string.includes';\nimport 'core-js/modules/es.string.trim';\nimport 'core-js/modules/es.object.values';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    authorization: `Bearer ${process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN}`,\n  },\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}